CREATE TABLE USUARIOS (
    ID_USUARIO SERIAL PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL,
    EMAIL VARCHAR(100) UNIQUE NOT NULL,
    SENHA VARCHAR(255) NOT NULL,
    CARGO VARCHAR(10) CHECK (CARGO IN ('admin', 'aluno')) DEFAULT 'aluno',
    MATRICULA VARCHAR(20) UNIQUE NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.UPDATED_AT = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_usuarios_timestamp
BEFORE UPDATE ON USUARIOS
FOR EACH ROW EXECUTE FUNCTION update_timestamp();


CREATE TABLE SALAS (
    ID_SALA SERIAL PRIMARY KEY,
    NOME VARCHAR(5) NOT NULL UNIQUE,
    LOCALIZACAO VARCHAR(100) NOT NULL,
    STATUS_SALA VARCHAR(12) CHECK (STATUS IN ('disponivel', 'indisponivel')) DEFAULT 'indisponivel',
    CAPACIDADE VARCHAR(5) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

COMMENT ON COLUMN SALAS.CAPACIDADE IS 'NÃºmero de lugares ou tamanho (S/M/L)';

CREATE TRIGGER update_salas_timestamp
BEFORE UPDATE ON SALAS
FOR EACH ROW EXECUTE FUNCTION update_timestamp();


CREATE TABLE RESERVAS (
    ID_RESERVA SERIAL PRIMARY KEY,
    ID_SALA INTEGER NOT NULL REFERENCES SALAS(ID_SALA) ON DELETE CASCADE,
    ID_USUARIO INTEGER NOT NULL REFERENCES USUARIOS(ID_USUARIO) ON DELETE CASCADE,
    DATA_INICIO DATE NOT NULL,
    DATA_FIM DATE NOT NULL,
    HORA_INICIO TIME NOT NULL,
    HORA_FIM TIME NOT NULL,
    STATUS_RESERVA VARCHAR(10) CHECK (STATUS IN ('pendente', 'confirmada', 'cancelada', 'concluida')) DEFAULT 'pendente',
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT chk_data_valida CHECK (DATA_FIM >= DATA_INICIO),
    CONSTRAINT chk_horario_valido CHECK (HORA_FIM > HORA_INICIO)
);

CREATE TRIGGER update_reservas_timestamp
BEFORE UPDATE ON RESERVAS
FOR EACH ROW EXECUTE FUNCTION update_timestamp();